import mensajeria.*
import mensajeros.*

describe "Contrataciones y despidos"
{
	fixture
	{
		mensajeria.contratar(neo)
		mensajeria.contratar(chuckNorris)
	}
	
	test "Contratar un mensajero"
	{
		assert.equals([neo,chuckNorris], mensajeria.mensajeros())
	}
	
	test "Despedir un mensajero"
	{
		mensajeria.despedir(chuckNorris)
		assert.equals([neo], mensajeria.mensajeros())
	}
	
	test "Despedir a todos los mensajeros"
	{
		mensajeria.despedirATodos()
		assert.that(mensajeria.mensajeros().isEmpty())
	}
}

describe "Es grande"
{
	fixture
	{
		mensajeria.contratar(neo)
		mensajeria.contratar(chuckNorris)
	}
	
	test "Mensajería con 2 mensajeros o menos NO es grande"
	{
		assert.notThat(mensajeria.esGrande())
	}
	
	test "Mensajería con más de 2 mensajeros es grande"
	{
		mensajeria.contratar(roberto)
		assert.that(mensajeria.esGrande())
	}
	
}

describe "Primer y último mensajero" 
{
	fixture
	{
		mensajeria.contratar(chuckNorris)
		mensajeria.contratar(neo)
		mensajeria.contratar(roberto)
	}
	
	test "Primer mensajero entrega el paquete"
	{
		paquete.destino(puenteDeBrooklyn)
		paquete.pagar()

		assert.that(paquete.puedeSerEntregadoPor(chuckNorris))
		assert.that(mensajeria.primerMensajeroPuedeEntregar(paquete))
	}
	
	test "Peso del último mensajero"
	{
		roberto.medioTransporte(bicicleta)
		assert.equals(roberto.peso(), mensajeria.pesoUltimoMensajero())
	}
}

describe "Puede entregar"
{
	fixture
	{
		paquetito.destino(matrix)
		
		mensajeria.contratar(roberto)
		mensajeria.contratar(neo)
	}
	
	test "Un mensajero puede entregar el paquete"
	{
		neo.tieneSaldo(true)
		assert.that(mensajeria.puedeEntregar(paquetito))
	}
	
	test "Ningún mensajero puede entregar el paquete"
	{
		neo.tieneSaldo(false)
		assert.notThat(mensajeria.puedeEntregar(paquetito))
	}
	
	test "Obtener mensajeros que pueden llevar un paquete dado"
	{
		mensajeria.contratar(chuckNorris)
		neo.tieneSaldo(true)
		
		assert.equals([neo,chuckNorris], mensajeria.losQuePuedenEntregar(paquetito))
	}
}

describe "Tiene sobrepeso"
{
	fixture
	{
		roberto.medioTransporte(camion)
		
		mensajeria.contratar(roberto)
		mensajeria.contratar(neo)
	}
	
	test "Una mensajería con peso promedio de 525kg tiene sobrepeso"
	{
		camion.acoplados(2)
		
		assert.equals(1050, roberto.peso() + neo.peso())
		assert.that(mensajeria.tieneSobrepeso())
	}
	
	test "Una mensajería con peso promedio de 483kg NO tiene sobrepeso"
	{
		camion.acoplados(1)
		mensajeria.contratar(chuckNorris)
		
		assert.equals(1450, roberto.peso() + neo.peso() + chuckNorris.peso())
		assert.notThat(mensajeria.tieneSobrepeso())
	}
}

describe "Puede enviar"
{
	fixture
	{
		mensajeria.contratar(neo)
		neo.tieneSaldo(true)
		
		paquetonViajero.agregarDestino(puenteDeBrooklyn)
		paquetonViajero.agregarDestino(matrix)
		paquete.destino(puenteDeBrooklyn)
		paquete.pagar()
		paquetito.destino(matrix)
	}
	
	test "Mensajería sin enviar paquetes no tiene facturación"
	{
		assert.equals(0, mensajeria.facturacion())
		assert.equals([], mensajeria.paquetesPendientes())
		assert.equals([], mensajeria.paquetesEnviados())
	}
	
	test "Mensajería que puede enviar paquete, incrementa su facturación"
	{
		paquetonViajero.pagar(200)
		mensajeria.enviar(paquetonViajero)
		
		assert.equals(200, mensajeria.facturacion())
		assert.equals([paquetonViajero], mensajeria.paquetesEnviados())
		assert.equals([], mensajeria.paquetesPendientes())
	}
	
	test "Mensajería que NO puede enviar paquete, lo agrega a pendientes"
	{
		mensajeria.enviar(paquetonViajero)
		
		assert.equals(0, mensajeria.facturacion())
		assert.equals([], mensajeria.paquetesEnviados())
		assert.equals([paquetonViajero], mensajeria.paquetesPendientes())
	}
	
	test "Intentar enviar múltiples paquetes"
	{	
		neo.tieneSaldo(false)
		paquetonViajero.quitarDestino(matrix)
		paquetonViajero.pagar(100)
		mensajeria.enviarTodos([paquete,paquetito,paquetonViajero])
		
		assert.equals(150, mensajeria.facturacion())
		assert.equals([paquete, paquetonViajero], mensajeria.paquetesEnviados())
		assert.equals([paquetito], mensajeria.paquetesPendientes())
	}
	
}

describe "Enviar pendiente más caro"
{
	fixture
	{
		mensajeria.contratar(neo)
		neo.tieneSaldo(false)
		
		paquetonViajero.agregarDestino(puenteDeBrooklyn)
		paquetonViajero.agregarDestino(matrix)
		paquetonViajero.pagar(200)
		
		paquete.destino(matrix)
		paquete.pagar()
		paquetito.destino(matrix)
		
		mensajeria.enviarTodos([paquetito, paquetonViajero, paquete])
	}
	
	test "Intento de enviar paquete más caro NO resulta exitoso"
	{
		mensajeria.intentarEnviarMasCaro()
		
		assert.equals(0, mensajeria.facturacion())
		assert.equals([paquetito, paquete, paquetonViajero], mensajeria.paquetesPendientes())
	}	
	
	test "Intento de enviar paquete más caro resulta exitoso"
	{
		mensajeria.contratar(chuckNorris)
		mensajeria.intentarEnviarMasCaro()
		
		assert.equals(200, mensajeria.facturacion())
		assert.equals([paquetonViajero], mensajeria.paquetesEnviados())
		assert.equals([paquetito, paquete], mensajeria.paquetesPendientes())
	}	
}

describe "Agregados"
{
	fixture
	{
		paquete.destino(puenteDeBrooklyn)
		paquete.pagar()
		paquetonViajero.agregarDestino(puenteDeBrooklyn)
		paquetonViajero.pagar(100)
		paquetito.destino(matrix)
	}
	
	test "Rani puede ser contratado"
	{	
		mensajeria.contratar(rani)
		mensajeria.enviarTodos([paquetito, paquetonViajero, paquete])
		
		assert.equals(150, mensajeria.facturacion())
		assert.equals([paquetito, paquetonViajero, paquete], mensajeria.paquetesEnviados())
		assert.equals([], mensajeria.paquetesPendientes())
	}
	
	test "La empresa puede enviar paquetes locos"
	{
		mensajeria.contratar(chuckNorris)
		mensajeria.enviarTodos([paquetito, paquetonViajero, paquete, paqueteLoco])
		
		assert.equals(1150, mensajeria.facturacion())
		assert.equals([paquetito, paquetonViajero, paquete, paqueteLoco], mensajeria.paquetesEnviados())
		assert.equals([], mensajeria.paquetesPendientes())
	}
}