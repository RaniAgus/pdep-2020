import wollok.game.*
import config.*
import objetosPrincipales.*
import tablero.*
import plantas.*
import zombies.*
import creadores.*
import disparos.*
import puntaje.*

describe "Cursor" {
				
	test "No se puede colocar una planta sin seleccionar una" {
		assert.throwsExceptionWithMessage("No se seleccionó ningún personaje!!", 
			({ cursor.posicionarPlanta() })
		)
	}		
			
	test "Cursor no puede colocar más de una planta en el mismo lugar" {
		cursor.seleccionarPlanta(creadorDeMargaritas)
		cursor.posicionarPlanta()
		contadorElixir.incrementarElixirDisponible()
		
		assert.throwsExceptionWithMessage("Esta posición está ocupada, busque otra!!", 
			({ cursor.posicionarPlanta() })
		)
	}
	
	test "No se pueden colocar más plantas que el elixir disponible" {
		cursor.seleccionarPlanta(creadorDeHielaguisantes)
		cursor.posicionarPlanta()
		cursor.moverHaciaLaDerecha()
		
		assert.throwsExceptionWithMessage("No se cuenta con el elixir suficiente!!", 
			({ cursor.posicionarPlanta() })
		)
	}	
	
	test "Cursor inicia en el centro del tablero" {
		assert.equals(game.at(10,5), cursor.position())
	}
	
	test "Cursor no puede moverse más arriba del tablero"{
		30.times({ i => cursor.moverHaciaArriba()})
		
		assert.equals(game.at(10,9), cursor.position())
	}
 	
	test "Cursor no puede moverse más abajo del tablero"{
		30.times({ i => cursor.moverHaciaAbajo()})
		
		assert.equals(game.at(10,2), cursor.position())
	}
	
	test "Cursor no puede moverse más a la izquierda del tablero"{
		30.times({ i => cursor.moverHaciaLaIzquierda()})
		
		assert.equals(game.at(4,5), cursor.position())
	}
	
	test "Cursor no puede moverse más a la derecha del tablero"{
		30.times({ i => cursor.moverHaciaLaDerecha()})
		
		assert.equals(game.at(18,5), cursor.position())
	}

}

describe "Tablero" {
	var posicionAleatoria = game.at(0, 2.randomUpTo(9))
	
	const margarita = new Margarita(
			danio = 25,
			velocidadAtaque = 3000, 
			vida = 0, 
			position = game.at(5,1),
			image = "soldado-desde-arriba.png"
	)
	
	const zombie = new Zombie (
			position = posicionAleatoria, 
			image = "zombie.png",
			vida = 100
		)
	
	
	test "Al colocar una planta, su posición está ocupada"{
		tablero.agregarPlanta(margarita)
		
		assert.that(tablero.estaOcupada( game.at(5,1) ))
	}
	
	test "Al eliminar una planta, su posición no está ocupada"{
		tablero.agregarPlanta(margarita)
		tablero.eliminarPlanta(margarita)
		
		assert.notThat(tablero.estaOcupada( game.at(5,1) ))
	}
	
	test "Al colocar un zombi, su posición está ocupada"{
		tablero.agregarZombie(zombie, 10000000)
		
		assert.that(tablero.estaOcupada(posicionAleatoria))
	}
	
	test "Al eliminar un zombie, su posición está libre" {
		tablero.agregarZombie(zombie, 10000000)
		tablero.eliminarZombie(zombie)
		
		assert.notThat(tablero.estaOcupada(posicionAleatoria))
	}
}


describe "Puntaje y Danios recibidos"{
	const posicionFija1 = game.at(2, 3)
	//const posicionFija2 = game.at(4, 3) por si queremos agregar otro zombie
	
	const margarita = new Margarita(danio = 50, image = "margarita.png", position = game.at(2,3), vida = 50,velocidadAtaque = 10)
	const hielo=new Hielo(image="null.png",position=posicionFija1,rango=5,velocidad=10,danio=10)
	const bala=new Bala(image="null.png",position=posicionFija1,rango=5,velocidad=10,danio=10)
	const zombie = new Zombie (
			position = posicionFija1, 
			image = "zombie.png", 
			vida = 100
		)
	test "Al morir un zombi en el nivel 2, se suma 100 al puntaje"{
		tablero.agregarZombie(zombie, 10000000)
		niveles.nivel(2)
		zombie.morir()
		assert.equals(100,puntaje.puntaje())
	}
	
	test "Al dispararse una bala, la misma choca con el zombie"{
		bala.disparar()
		zombie.recibirAtaque(bala)
		assert.equals(90, zombie.vida())
	}
	
	test "Al dispararse un hielo, el zombie se congela, pero no le baja su vida"{
		hielo.disparar()
		zombie.congelar(100)
		assert.equals(100, zombie.vida())
		assert.that(zombie.estaCongelado())
	}
	
	test "Al chocarse con una margarita, la misma le baja 50 de danio"{
		zombie.recibirAtaque(margarita)
		assert.equals(50, zombie.vida())
	}
	
	
}
/*
describe "Finalizacion de Juego"{
		const posicionFinalZombie = game.at(5, 18)
		const zombie = new Zombie (
			position = posicionFinalZombie, 
			image = "zombie.png",
			vida = 100
		)
		/
		test "El juego finaliza al estar el zombie en la posicion del muro"{
			zombie.caminar()
			assert.that(game.say(cursor, "FIN DEL JUEGO!"))
		}
	
}

*/
