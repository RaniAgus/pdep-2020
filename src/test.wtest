import example.*

describe "commits" {
	const pdep = new Carpeta(nombre = "pdep")
	
	const commitInicial = new Commit(descripcion = "commit inicial", cambios = [
		({ carpeta => carpeta.crear("leeme.md")}),
		({ carpeta => carpeta.crear("parcial.wlk")}),
		({ carpeta => carpeta.agregar("leeme.md", "Este es un parcial")})
	])
	
	test "aplicar commit" {
		commitInicial.aplicar(pdep)
		
		assert.that( pdep.contiene("leeme.md") )
		assert.equals( "Este es un parcial", pdep.obtener("leeme.md").contenido() )
		assert.that( pdep.contiene("parcial.wlk") )
		assert.equals( "", pdep.obtener("parcial.wlk").contenido() )
	}
	
	test "aplicar commit en carpeta no vacÃ­a falla" {
		pdep.crear("parcial.wlk")
		
		assert.throwsExceptionWithMessage("Ya existe un archivo con el nombre: parcial.wlk", 
			{commitInicial.aplicar(pdep)}
		)
	}
}

describe "branch" {
	const pdep = new Carpeta(nombre = "pdep")
	
	const commitInicial = new Commit(descripcion = "commit inicial", cambios = [
		({ carpeta => carpeta.crear("leeme.md")}),
		({ carpeta => carpeta.crear("parcial.wlk")}),
		({ carpeta => carpeta.agregar("leeme.md", "Este es un parcial")})
	])
	
	const avance = new Commit(descripcion = "avance", cambios = [
		({ carpeta => carpeta.agregar("parcial.wlk", "object wollok { method sayHello() = hola }") }),
		({ carpeta => carpeta.eliminar("leeme.md") })
	])
	
	const agus = new Branch(commits = [commitInicial, avance])
	
	test "checkout branch" {
		agus.checkout(pdep)
		
		assert.notThat( pdep.contiene("leeme.md") )
		assert.that( pdep.contiene("parcial.wlk") )
		assert.equals( "object wollok { method sayHello() = hola }", pdep.obtener("parcial.wlk").contenido() )
	}
}